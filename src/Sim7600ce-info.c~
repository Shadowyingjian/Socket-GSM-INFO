    //串口相关的头文件  
    #include<stdio.h>      /*标准输入输出定义*/  
    #include<stdlib.h>     /*标准函数库定义*/  
    #include<unistd.h>     /*Unix 标准函数定义*/  
    #include<sys/types.h>   
    #include<sys/stat.h>     
    #include<fcntl.h>      /*文件控制定义*/  
    #include<termios.h>    /*PPSIX 终端控制定义*/  
    #include<errno.h>      /*错误号定义*/  
    #include<string.h>  
       
       
    //宏定义  
    #define FALSE  -1  
    #define TRUE   0  
       
    /******************************************************************* 
    * 名称：                  UART0_Open 
    * 功能：                打开串口并返回串口设备文件描述 
    * 入口参数：        fd    :文件描述符     port :串口号(ttyS0,ttyS1,ttyS2) 
    * 出口参数：        正确返回为1，错误返回为0 
    *******************************************************************/  
    int UART0_Open(int fd,char* port)  
    {  
         
    	fd = open( port, O_RDWR|O_NOCTTY|O_NDELAY);  
    	if (FALSE == fd)  
    	{  
    		perror("Can't Open Serial Port");  
    		return(FALSE);  
    	}  
    	//恢复串口为阻塞状态                                 
    	if(fcntl(fd, F_SETFL, 0) < 0)  
    	{  
    		printf("fcntl failed!\n");  
    		return(FALSE);  
    	}       
    	else  
    	{  
    		printf("fcntl=%d\n",fcntl(fd, F_SETFL,0));  
    	}  
    	//测试是否为终端设备      
    	if(0 == isatty(STDIN_FILENO))  
    	{  
    		printf("standard input is not a terminal device\n");  
    		return(FALSE);  
    	}  
    	else  
    	{  
    		printf("isatty success!\n");  
    	}                
    	printf("fd->open=%d\n",fd);  
    	return fd;  
    }  
    /******************************************************************* 
    * 名称：                UART0_Close 
    * 功能：                关闭串口并返回串口设备文件描述 
    * 入口参数：        fd    :文件描述符     port :串口号(ttyS0,ttyS1,ttyS2) 
    * 出口参数：        void 
    *******************************************************************/  
       
    void UART0_Close(int fd)  
    {  
    	close(fd);  
    }  
       
    /******************************************************************* 
    * 名称：                UART0_Set 
    * 功能：                设置串口数据位，停止位和效验位 
    * 入口参数：        fd        串口文件描述符 
    *                              speed     串口速度 
    *                              flow_ctrl   数据流控制 
    *                           databits   数据位   取值为 7 或者8 
    *                           stopbits   停止位   取值为 1 或者2 
    *                           parity     效验类型 取值为N,E,O,,S 
    *出口参数：          正确返回为1，错误返回为0 
    *******************************************************************/  
    int UART0_Set(int fd,int speed,int flow_ctrl,int databits,int stopbits,int parity)  
    {  
         
    	int   i;  
    	int   status;  
    	int   speed_arr[] = { B115200, B19200, B9600, B4800, B2400, B1200, B300};  
    	int   name_arr[] = {115200,  19200,  9600,  4800,  2400,  1200,  300};  
               
    	struct termios options;  
         
    	/*tcgetattr(fd,&options)得到与fd指向对象的相关参数，并将它们保存于options,该函数还可以测试配置是否正确，该串口是否可用等。若调用成功，函数返回值为0，若调用失败，函数返回值为1. 
        */  
    	if( tcgetattr( fd,&options)  !=  0)  
    	{  
    		perror("SetupSerial 1");      
    		return(FALSE);   
    	}  
        
        //设置串口输入波特率和输出波特率  
    	for ( i= 0;  i < sizeof(speed_arr) / sizeof(int);  i++)  
    	{  
    		if  (speed == name_arr[i])  
    		{               
    			cfsetispeed(&options, speed_arr[i]);   
    			cfsetospeed(&options, speed_arr[i]);    
    		}  
    	}       
         
        //修改控制模式，保证程序不会占用串口  
        options.c_cflag |= CLOCAL;  
        //修改控制模式，使得能够从串口中读取输入数据  
        options.c_cflag |= CREAD;  
        
        //设置数据流控制  
        switch(flow_ctrl)  
        {  
            
    		case 0 ://不使用流控制  
                  options.c_cflag &= ~CRTSCTS;  
                  break;     
            
    		case 1 ://使用硬件流控制  
                  options.c_cflag |= CRTSCTS;  
                  break;  
    		case 2 ://使用软件流控制  
                  options.c_cflag |= IXON | IXOFF | IXANY;  
                  break;  
        }  
        //设置数据位  
        //屏蔽其他标志位  
        options.c_cflag &= ~CSIZE;  
        switch (databits)  
        {    
    		case 5    :  
                         options.c_cflag |= CS5;  
                         break;  
    		case 6    :  
                         options.c_cflag |= CS6;  
                         break;  
    		case 7    :      
                     options.c_cflag |= CS7;  
                     break;  
    		case 8:      
                     options.c_cflag |= CS8;  
                     break;    
    		default:     
                     fprintf(stderr,"Unsupported data size\n");  
                     return (FALSE);   
        }  
        //设置校验位  
        switch (parity)  
        {    
    		case 'n':  
    		case 'N': //无奇偶校验位。  
                     options.c_cflag &= ~PARENB;   
                     options.c_iflag &= ~INPCK;      
                     break;   
    		case 'o':    
    		case 'O'://设置为奇校验      
                     options.c_cflag |= (PARODD | PARENB);   
                     options.c_iflag |= INPCK;               
                     break;   
    		case 'e':   
    		case 'E'://设置为偶校验    
                     options.c_cflag |= PARENB;         
                     options.c_cflag &= ~PARODD;         
                     options.c_iflag |= INPCK;        
                     break;  
    		case 's':  
    		case 'S': //设置为空格   
                     options.c_cflag &= ~PARENB;  
                     options.c_cflag &= ~CSTOPB;  
                     break;   
            default:    
                     fprintf(stderr,"Unsupported parity\n");      
                     return (FALSE);   
        }   
        // 设置停止位   
        switch (stopbits)  
        {    
    		case 1:     
                     options.c_cflag &= ~CSTOPB; break;   
    		case 2:     
                     options.c_cflag |= CSTOPB; break;  
    		default:     
                           fprintf(stderr,"Unsupported stop bits\n");   
                           return (FALSE);  
        }  
         
    	//修改输出模式，原始数据输出  
    	options.c_oflag &= ~OPOST;  
        
    	options.c_lflag &= ~(ICANON | ECHO | ECHOE | ISIG);  
    	//options.c_lflag &= ~(ISIG | ICANON);  
         
        //设置等待时间和最小接收字符  
        options.c_cc[VTIME] = 1; /* 读取一个字符等待1*(1/10)s */    
        options.c_cc[VMIN] = 1; /* 读取字符的最少个数为1 */  
         
        //如果发生数据溢出，接收数据，但是不再读取 刷新收到的数据但是不读  
        tcflush(fd,TCIFLUSH);  
         
        //激活配置 (将修改后的termios数据设置到串口中）  
        if (tcsetattr(fd,TCSANOW,&options) != 0)    
    	{  
    		perror("com set error!\n");    
    		return (FALSE);   
    	}  
        return (TRUE);   
    }  
    /******************************************************************* 
    * 名称：                UART0_Init() 
    * 功能：                串口初始化 
    * 入口参数：        fd       :  文件描述符    
    *               speed  :  串口速度 
    *                              flow_ctrl  数据流控制 
    *               databits   数据位   取值为 7 或者8 
    *                           stopbits   停止位   取值为 1 或者2 
    *                           parity     效验类型 取值为N,E,O,,S 
    *                       
    * 出口参数：        正确返回为1，错误返回为0 
    *******************************************************************/  
    int UART0_Init(int fd, int speed,int flow_ctrl,int databits,int stopbits,int parity)  
    {  
        int err;  
        //设置串口数据帧格式  
        if (UART0_Set(fd,115200,0,8,1,'N') == FALSE)  
    	{                                                           
    		return FALSE;  
    	}  
        else  
    	{  
    		return  TRUE;  
    	}  
    }  
       
    /******************************************************************* 
    * 名称：                  UART0_Recv 
    * 功能：                接收串口数据 
    * 入口参数：        fd                  :文件描述符     
    *                              rcv_buf     :接收串口中数据存入rcv_buf缓冲区中 
    *                              data_len    :一帧数据的长度 
    * 出口参数：        正确返回为1，错误返回为0 
    *******************************************************************/  
    int UART0_Recv(int fd, char *rcv_buf,int data_len)  
    {  
    	int len,fs_sel;  
        fd_set fs_read;  
         
        struct timeval time;  
         
        FD_ZERO(&fs_read);  
        FD_SET(fd,&fs_read);  
         
        time.tv_sec = 10;  
        time.tv_usec = 0;  
         
        //使用select实现串口的多路通信  
        fs_sel = select(fd+1,&fs_read,NULL,NULL,&time);  
        printf("fs_sel = %d\n",fs_sel);  
        if(fs_sel)  
    	{  
    		len = read(fd,rcv_buf,data_len);  
    		printf("I am right!(version1.2) len = %d fs_sel = %d\n",len,fs_sel);  
    		return len;  
    	}  
        else  
    	{  
    		printf("Sorry,I am wrong!");  
    		return FALSE;  
    	}       
    }  
    /******************************************************************** 
    * 名称：                  UART0_Send 
    * 功能：                发送数据 
    * 入口参数：        fd                  :文件描述符     
    *                              send_buf    :存放串口发送数据 
    *                              data_len    :一帧数据的个数 
    * 出口参数：        正确返回为1，错误返回为0 
    *******************************************************************/  
    int UART0_Send(int fd, char *send_buf,int data_len)  
    {  
        int len = 0;  
         
        len = write(fd,send_buf,data_len);  
        if (len == data_len )  
    	{  
    		printf("send data is %s\n",send_buf);
    		return len;  
    	}       
        else     
    	{  
                     
    		tcflush(fd,TCOFLUSH);  
    		return FALSE;  
    	}  
         
    }  
       
       
    int main(int argc, char **argv)  
    {  
        int fd;                            //文件描述符  
        int err;                           //返回调用函数的状态  
        int len;                          
        int s_len;
        int i;  
        int step=0;
        char send_end[1]={0x1a};
        char rcv_buf[1024];         
        char gsm_info[1028];
        char gsm_ccid[1028];
        char gsm_name[1028];
        char gsm_data[1028];
        //char send_buf[20]="tiger john";  
        char send_buf[20]="AT\r\n";
		
        if(argc != 3)  
    	{  
    		printf("Usage: %s /dev/ttySn 0(send data)/1 (receive data) \n",argv[0]);  
    		return FALSE;  
    	}  
        fd = UART0_Open(fd,argv[1]); //打开串口，返回文件描述符  
        do
    	{  
    		err = UART0_Init(fd,115200,0,8,1,'N');  
    		printf("Set Port Exactly!\n");  
    	}while(FALSE == err || FALSE == fd);  
         
        if(0 == strcmp(argv[2],"0"))  
    	{  
    		for(i = 0;i < 10;i++)  
    		{  
     			len = UART0_Send(fd,send_buf,10);  
    			if(len > 0)  
    				printf(" %d time send %d data successful\n",i,len);  
    			else  
    				printf("send data failed!\n");  
                                
    			sleep(2);  
    		}  
    		UART0_Close(fd);               
    	}  
        else  
    	{                                        
    		while (1) //循环读取数据  
    		{   
                 if(step==0)
                 {
					memset(gsm_info,0,sizeof(gsm_info));
					memset(gsm_ccid,0,sizeof(gsm_ccid));
					memset(gsm_name,0,sizeof(gsm_name));
					memset(gsm_data,0,sizeof(gsm_data));
                   memset(rcv_buf,0,sizeof(rcv_buf)); 
                s_len = UART0_Send(fd,"AT\r\n",strlen("AT\r\n"));  
    			if(s_len > 0)  
    				printf("step:%d  send %d data successful\n",step,len);  
    			else  
    				printf("send data failed!\n");  
                sleep(2);  
    			len = UART0_Recv(fd, rcv_buf,99);  
      			if(len > 0)  
    			{  
                    char *c1=strstr(rcv_buf,"OK");
                    if(c1 != NULL)
                    {
                        step=1;
                        printf("get answer1 %s \n",c1);
                    }
    				rcv_buf[len] = '\0';  
    				printf("receive data is %s\n",rcv_buf);  
    				printf("len = %d\n",len);  
    			}  
    			else  
    			{  
    				printf("cannot receive data\n");  
    			}  
    			sleep(2);  
                 }

                 if(step==1)
                 {
                    memset(rcv_buf,0,sizeof(rcv_buf)); 
                      s_len = UART0_Send(fd,"AT+CREG?\r\n",strlen("AT+CREG?\r\n"));  
    			if(s_len > 0)  
    				printf(" step:%d time send %d data successful\n",step,len);  
    			else  
    				printf("send data failed!\n");  
                sleep(2);  
    			len = UART0_Recv(fd, rcv_buf,99);  
      			if(len > 0)  
    			{  
                    char *c2=strstr(rcv_buf,"+CREG:");
                    if(c2 != NULL)
                    {
                        step=2;
                        printf("get answer2 %s \n",c2);
                    }
    				rcv_buf[len] = '\0';  
    				printf("receive data is %s\n",rcv_buf);  
    				printf("len = %d\n",len);  
    			}  
    			else  
    			{  
    				printf("cannot receive data\n");  
    			}  
    			sleep(2);  
                 }

                 if(step==2)
                 {
                     memset(rcv_buf,0,sizeof(rcv_buf)); 
                      s_len = UART0_Send(fd,"AT+CNLSA=1\r\n",strlen("AT+CNLSA=1\r\n"));  
    			if(s_len > 0)  
    				printf(" step:%d time send %d data successful\n",step,len);  
    			else  
    				printf("send data failed!\n");  
                sleep(2);  
    			len = UART0_Recv(fd, rcv_buf,99);  
      			if(len > 0)  
    			{  
                    char *c3=strstr(rcv_buf,"OK");
                    if(c3 != NULL)
                    {
                        step=4;
                        printf("get answer3 %s \n",c3);
                    }
    				rcv_buf[len] = '\0';  
    				printf("receive data is %s\n",rcv_buf);  
    				printf("len = %d\n",len);  
    			}  
    			else  
    			{  
    				printf("cannot receive data\n");  
    			}  
    			sleep(2);  
                 }

                 if(step==4)
                 {
                 memset(rcv_buf,0,sizeof(rcv_buf));     
                s_len = UART0_Send(fd,"AT+CNSMOD?\r\n",strlen("AT+CNSMOD?\r\n"));  
    			if(s_len > 0)  
    				printf(" step:%d time send %d data successful\n",step,len);  
    			else  
    				printf("send data failed!\n");  
                sleep(2);  
    			len = UART0_Recv(fd, rcv_buf,99);  
      			if(len > 0)  
    			{  
                    char *c4=strstr(rcv_buf,"+CNSMOD:");
                    if(c4 != NULL)
                    {
                         //printf("len of c4 =%d",strlen(c4));
                         //memcpy(gsm_name,c4+11,15);
                        step=42;
                        printf("get answer4 %s \n",c4);
                    }
    				rcv_buf[len] = '\0';  
    				printf("receive data is %s\n",rcv_buf);  
    				printf("len = %d\n",len);  
    			}  
    			else  
    			{  
    				printf("cannot receive data\n");  
    			}  
    			sleep(2);  

                 }
                if(step==42)
                {
                    memset(rcv_buf,0,sizeof(rcv_buf)); 
                     s_len = UART0_Send(fd,"AT+CNMP=13\r\n",strlen("AT+CNMP=13\r\n"));  
    			if(s_len > 0)  
    				printf(" step:%d time send %d data successful\n",step,len);  
    			else  
    				printf("send data failed!\n");  
                sleep(2);  
    			len = UART0_Recv(fd, rcv_buf,99);  
      			if(len > 0)  
    			{  
                    char *c42=strstr(rcv_buf,"OK");
                    if(c42 != NULL)
                    {
                        //printf("len of c42 =%d",strlen(c42));
                        //memcpy(gsm_ccid,c42,21);
                        step=5;
                        printf("get answer42 %s \n",c42);
                    }
    				rcv_buf[len] = '\0';  
    				printf("receive data is %s\n",rcv_buf);  
    				printf("len = %d\n",len);  
    			}  
    			else  
    			{  
    				printf("cannot receive data\n");  
    			}  
    			sleep(2);  


                }
               
                 if(step==5)
                 {
                     memset(rcv_buf,0,sizeof(rcv_buf)); 
                 s_len = UART0_Send(fd,"AT+CNSMOD?\r\n",strlen("AT+CNSMOD?\r\n"));  
    			if(s_len > 0)  
    				printf(" step:%d time send %d data successful\n",step,len);  
    			else  
    				printf("send data failed!\n");  
                sleep(2);  
    			len = UART0_Recv(fd, rcv_buf,99);  
      			if(len > 0)  
    			{  
                    char *c5=strstr(rcv_buf,"+CNSMOD:");
                    if(c5 != NULL)
                    {
                        step=6;
                        printf("get answer5 %s \n",c5);
                    }
    				rcv_buf[len] = '\0';  
    				printf("receive data is %s\n",rcv_buf);  
    				printf("len = %d\n",len);  
    			}  
    			else  
    			{  
    				printf("cannot receive data\n");  
    			}  
    			sleep(2);  
                 }
                 if(step==6)
                 {
                     memset(rcv_buf,0,sizeof(rcv_buf)); 
                      s_len = UART0_Send(fd,"AT+MONI?\r\n",strlen("AT+MONI?\r\n"));  
    			if(s_len > 0)  
    				printf(" step:%d time send %d data successful\n",step,len);  
    			else  
    				printf("send data failed!\n");  
                sleep(2);  
    			len = UART0_Recv(fd, rcv_buf,1023);  
      			if(len > 0)  
    			{  
                    
                    char *c6=strstr(rcv_buf,"OK");
                    if(c6 != NULL)
                    {
                   
                       printf("len of c61=%d 2=%d\n",sizeof(c6),strlen(c6));
                       memcpy(gsm_info,rcv_buf,strlen(rcv_buf));
                        step=7;
                        printf("get answer6 %s \n",c6);
                    }
    				rcv_buf[len] = '\0';  
    				printf("receive data is %s\n",rcv_buf);  
    				printf("len = %d\n",len);  
    			}  
    			else  
    			{  
    				printf("cannot receive data\n");  
    			}  
    			sleep(2);  
                 }


                 if(step==7)
                 {
                     memset(rcv_buf,0,sizeof(rcv_buf)); 
                     s_len = UART0_Send(fd,"AT+CNMP=38\r\n",strlen("AT+CNMP=38\r\n"));  
    			if(s_len > 0)  
    				printf(" step:%d time send %d data successful\n",step,len);  
    			else  
    				printf("send data failed!\n");  
                sleep(2);  
    			len = UART0_Recv(fd, rcv_buf,99);  
      			if(len > 0)  
    			{  
                    char *c7=strstr(rcv_buf,"OK");
                    if(c7 != NULL)
                    {
                        step=71;
                        printf("get answer7 %s \n",c7);
                    }
    				rcv_buf[len] = '\0';  
    				printf("receive data is %s\n",rcv_buf);  
    				printf("len = %d\n",len);  
    			}  
    			else  
    			{  
    				printf("cannot receive data\n");  
    			}  
    			sleep(2);  
                 }
                if(step==71)
                 {
                     memset(rcv_buf,0,sizeof(rcv_buf)); 
                     s_len = UART0_Send(fd,"AT+CMGSI=4\r\n",strlen("AT+CMGSI=4\r\n"));  
    			if(s_len > 0)  
    				printf(" step:%d time send %d data successful\n",step,len);  
    			else  
    				printf("send data failed!\n");  
                sleep(2);  
    			len = UART0_Recv(fd, rcv_buf,1023);  
      			if(len > 0)  
    			{  
                    char *c71=strstr(rcv_buf,"OK");
                    if(c71 != NULL)
                    {
                        step=8;
                        printf("get answer71 %s \n",c71);
                    }
    				rcv_buf[len] = '\0';  
    				printf("receive data is %s\n",rcv_buf);  
    				printf("len = %d\n",len);  
    			}  
    			else  
    			{  
    				printf("cannot receive data\n");  
    			}  
    			sleep(2);  
                 }

                 if(step==8)
                 {
                     memset(rcv_buf,0,sizeof(rcv_buf)); 
                      s_len = UART0_Send(fd,"AT+CMGRMI=4\r\n",strlen("AT+CMGRMI=4\r\n"));  
    			if(s_len > 0)  
    				printf(" step:%d time send %d data successful\n",step,len);  
    			else  
    				printf("send data failed!\n");  
                sleep(2);  
    			len = UART0_Recv(fd, rcv_buf,1023);  
      			if(len > 0)  
    			{  
                    char *c8=strstr(rcv_buf,"OK");
                    if(c8 != NULL)
                    {
                        step=9;
                        printf("get answer8 %s \n",c8);
                    }
    				rcv_buf[len] = '\0';  
    				printf("receive data is %s\n",rcv_buf);  
    				printf("len = %d\n",len);  
    			}  
    			else  
    			{  
    				printf("cannot receive data\n");  
    			}  
    			sleep(2);  
                 }
                if(step==9)
                {
                   memset(rcv_buf,0,sizeof(rcv_buf));
                   s_len = UART0_Send(fd,"AT+CPSI?\r\n",strlen("AT+CPSI?\r\n"));  
    			if(s_len > 0)  
    				printf(" step:%d time send %d data successful\n",step,len);  
    			else  
    				printf("send data failed!\n");  
                sleep(2);  
    			len = UART0_Recv(fd, rcv_buf,99);  
      			if(len > 0)  
    			{  
                    char *c9=strstr(rcv_buf,"+CPSI:");
                    if(c9 != NULL)
                    {
                        step=91;
                        printf("get answer9 %s \n",c9);
                    }
    				rcv_buf[len] = '\0';  
    				printf("receive data is %s\n",rcv_buf);  
    				printf("len = %d\n",len);  
    			}  
    			else  
    			{  
    				printf("cannot receive data\n");  
    			}  
    			sleep(2);  
                }

                if(step==91)
                {
                 memset(rcv_buf,0,sizeof(rcv_buf));
                   s_len = UART0_Send(fd,"AT+NETOPEN\r\n",strlen("AT+NETOPEN\r\n"));  
    			if(s_len > 0)  
    				printf(" step:%d time send %d data successful\n",step,len);  
    			else  
    				printf("send data failed!\n");  
                sleep(2);  
    			len = UART0_Recv(fd, rcv_buf,99);  
      			if(len > 0)  
    			{  
                    char *c91=strstr(rcv_buf,"OK");
                    if(c91 != NULL)
                    {
                        step=92;
                        printf("get answer91 %s \n",c91);
                    }
    				rcv_buf[len] = '\0';  
    				printf("receive data is %s\n",rcv_buf);  
    				printf("len = %d\n",len);  
    			}  
    			else  
    			{  
    				printf("cannot receive data\n");  
    			}  
    			sleep(2);  
                }

               if(step == 92)
               {
                    memset(rcv_buf,0,sizeof(rcv_buf));
                   s_len = UART0_Send(fd,"AT+CIPOPEN=0,\"TCP\",\"120.27.155.49\",5000\r\n",strlen("AT+CIPOPEN=0,\"TCP\",\"120.27.155.49\",5000\r\n"));  
    			if(s_len > 0)  
    				printf(" step:%d time send %d data successful\n",step,len);  
    			else  
    				printf("send data failed!\n");  
                sleep(2);  
    			len = UART0_Recv(fd, rcv_buf,99);  
      			if(len > 0)  
    			{  
                    char *c92=strstr(rcv_buf,"OK");
                    if(c92 != NULL)
                    {
                        step=93;
                        printf("get answer92 %s \n",c92);
                    }
    				rcv_buf[len] = '\0';  
    				printf("receive data is %s\n",rcv_buf);  
    				printf("len = %d\n",len);  
    			}  
    			else  
    			{  
    				printf("cannot receive data\n");  
    			}  
    			sleep(2);  
                }
                if(step ==93)
                {
                   memset(rcv_buf,0,sizeof(rcv_buf));
                   s_len = UART0_Send(fd,"AT+CIPSEND=0,\r\n",strlen("AT+CIPSEND=0,\r\n"));  
    			if(s_len > 0)  
    				printf(" step:%d time send %d data successful\n",step,len);  
    			else  
    				printf("send data failed!\n");  
                sleep(2);  
    			len = UART0_Recv(fd, rcv_buf,99);  
      			if(len > 0)  
    			{  
                    char *c93=strstr(rcv_buf,">");
                    if(c93 != NULL)
                    {
                        step=10;
                        printf("get answer93 %s \n",c93);
                    }
    				rcv_buf[len] = '\0';  
    				printf("receive data is %s\n",rcv_buf);  
    				printf("len = %d\n",len);  
    			}  
    			else  
    			{  
    				printf("cannot receive data\n");  
    			}  
    			sleep(2);   
                }

/*
                 if(step==9)
                 {
                     memset(rcv_buf,0,sizeof(rcv_buf)); 
                       s_len = UART0_Send(fd,"AT+CIPSEND\r\n",strlen("AT+CIPSEND\r\n"));  
    			if(s_len > 0)  
    				printf(" step:%d time send %d data successful\n",step,len);  
    			else  
    				printf("send data failed!\n");  
                sleep(2);  
    			len = UART0_Recv(fd, rcv_buf,99);  
      			if(len > 0)  
    			{  
                    char *c9=strstr(rcv_buf,">");
                    if(c9 != NULL)
                    {
                        step=10;
                        printf("get answer9 %s \n",c9);
                    }
    				rcv_buf[len] = '\0';  
    				printf("receive data is %s\n",rcv_buf);  
    				printf("len = %d\n",len);  
    			}  
    			else  
    			{  
    				printf("cannot receive data\n");  
    			}  
    			sleep(2);  
                 }
*/
                 if(step==10)
                 {
                     memset(rcv_buf,0,sizeof(rcv_buf)); 
                    //sprintf(gsm_data,"GSM-Info: %s-%s-%s",gsm_name,gsm_ccid,gsm_info);
                     s_len = UART0_Send(fd,gsm_info,strlen(gsm_info));  
    			if(s_len > 0)  
    				printf(" step:%d time send %d data successful\n",step,len);  
    			else  
    				printf("send data failed!\n");  
                sleep(2);  

                 s_len = write(fd,send_end,sizeof(send_end));  
    			if(s_len > 0)  
    				printf(" step:%d time send %d data successful\n",step,len);  
    			else  
    				printf("send data failed!\n");  
                sleep(2);  
                
    			len = UART0_Recv(fd, rcv_buf,99);  
      			if(len > 0)  
    			{  
//send_end
                    char *c10=strstr(rcv_buf,"+CIPSEND:");
                    if(c10 != NULL)
                    {
                        step=11;
                        printf("get answer10 %s \n",c10);
                    }
    				rcv_buf[len] = '\0';  
    				printf("receive data is %s\n",rcv_buf);  
    				printf("len = %d\n",len);  
    			}  
    			else  
    			{  
    				printf("cannot receive data\n");  
    			}  
    			sleep(2);     
                 }
                 if(step==11)
                 {
                     memset(rcv_buf,0,sizeof(rcv_buf)); 
                       s_len = UART0_Send(fd,"AT+CIPCLOSE=0\r\n",strlen("AT+CIPCLOSE=0\r\n"));  
    			if(s_len > 0)  
    				printf(" step:%d time send %d data successful\n",step,len);  
    			else  
    				printf("send data failed!\n");  
                sleep(2);  
    			len = UART0_Recv(fd, rcv_buf,99);  
      			if(len > 0)  
    			{  
                    char *c11=strstr(rcv_buf,"+CIPCLOSE:");
                    if(c11 != NULL)
                    {
                        step=12;
                        printf("get answer11 %s \n",c11);
                    }
    				rcv_buf[len] = '\0';  
    				printf("receive data is %s\n",rcv_buf);  
    				printf("len = %d\n",len);  
    			}  
    			else  
    			{  
    				printf("cannot receive data\n");  
    			}  
    			sleep(2);  
                 }

                if(step ==12)
               {
                memset(rcv_buf,0,sizeof(rcv_buf)); 
                       s_len = UART0_Send(fd,"AT+NETCLOSE\r\n",strlen("AT+NETCLOSE\r\n"));  
    			if(s_len > 0)  
    				printf(" step:%d time send %d data successful\n",step,len);  
    			else  
    				printf("send data failed!\n");  
                sleep(2);  
    			len = UART0_Recv(fd, rcv_buf,99);  
      			if(len > 0)  
    			{  
                    char *c12=strstr(rcv_buf,"OK");
                    if(c12 != NULL)
                    {
                        step=0;
                        printf("get answer12 %s \n",c12);
                    }
    				rcv_buf[len] = '\0';  
    				printf("receive data is %s\n",rcv_buf);  
    				printf("len = %d\n",len);  
    			}  
    			else  
    			{  
    				printf("cannot receive data\n");  
    			}  
    			sleep(2);  
               }
    		}              
    		UART0_Close(fd);   
    	}  
    }  
